//variables
$default-float: left !default;
$opposite-direction: right !default;

$total-columns: 12 !default;

//margin i padding oparte na em
$row-width:     $max-width !default;
// $column-gutter: 24px !default;
$column-gutter: 5% !default;

//
// Grid Function
//
@function gridCalc($colNumber, $totalColumns) {
  @return percentage(($colNumber / $totalColumns));
}

//
// Grid Mixins
//

// For creating container, nested, and collapsed rows.
@mixin grid-row() {

    width: 100%;
    margin: 0 auto;
    max-width: $row-width;
    @include clearfix;
  }



// For creating columns - @include these inside a media query to control small vs. large grid layouts
@mixin grid-column($columns:false, $padding-left:"", $padding-right:"", $offset:false, $last-column:false, $center:false,  $float:true) {

    position: relative;

    @if $padding-left == "" {
      padding-left: $column-gutter / 2;
      }
    @else if $padding-left=="std" {
      padding-left: $column-gutter / 2;
    }
    @else {
    padding-left: em($padding-left);
    }
    @if $padding-right == "" {
      padding-right: $column-gutter / 2;
      }
    @else {
    padding-right: em($padding-right);
    }
  

  // If a column number is given, calculate width
  @if $columns {
    width: gridCalc($columns, $total-columns);

    // If last column, float naturally instead of to the right
    @if $last-column { float: $opposite-direction; }
  }

  // If offset, calculate appropriate margins
  @if $offset { margin-#{$default-float}: gridCalc($offset, $total-columns); }
  
  // If centered, get rid of float and add appropriate margins
  @if $center {
    margin-#{$default-float}: auto;
    margin-#{$opposite-direction}: auto;
    float: none !important;
  }

  @if $float {
    @if $float == left or $float == true { float: $default-float; }
    @else if $float == right { float: $opposite-direction; }
    @else { float: none; }
  }
}


